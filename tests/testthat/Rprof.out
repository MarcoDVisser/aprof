sample.interval=20000
"parse" "sys.source" "doTryCatch" "tryCatchOne" "tryCatchList" "tryCatch" "try" "loadNamespace" "asNamespace" "namespaceImportFrom" "loadNamespace" "asNamespace" "namespaceImportFrom" "loadNamespace" "asNamespace" "namespaceImportFrom" "loadNamespace" "doTryCatch" "tryCatchOne" "tryCatchList" "tryCatch" "getNamespace" "asNamespace" "getExportedValue" "::" "eval" "eval" "withVisible" "source" ".x" 
"lapply" "find.package" "loadNamespace" "doTryCatch" "tryCatchOne" "tryCatchList" "tryCatch" "getNamespace" "asNamespace" "getExportedValue" "::" "assign" "fun" "doTryCatch" "tryCatchOne" "tryCatchList" "tryCatch" "runHook" "loadNamespace" "asNamespace" "namespaceImportFrom" "loadNamespace" "doTryCatch" "tryCatchOne" "tryCatchList" "tryCatch" "getNamespace" "asNamespace" "getExportedValue" "::" "eval" "eval" "withVisible" "source" ".x" 
"f" "isTRUE" "FUN" "lapply" "vapply" "compact" "unlist" "recurse" "FUN" "lapply" "vapply" "compact" "unlist" "recurse" "FUN" "lapply" "vapply" "compact" "unlist" "recurse" "FUN" "lapply" "vapply" "compact" "unlist" "recurse" "FUN" "lapply" "vapply" "compact" "unlist" "recurse" "FUN" "lapply" "vapply" "compact" "unlist" "recurse" "extract_lang" "wrap_inner_loop" "eval" "FUN" "lapply" "unquote" "bquote" "stopifnot" "make_function" "eval" "eval" "assign" "fun" "doTryCatch" "tryCatchOne" "tryCatchList" "tryCatch" "runHook" "loadNamespace" "asNamespace" "namespaceImportFrom" "loadNamespace" "doTryCatch" "tryCatchOne" "tryCatchList" "tryCatch" "getNamespace" "asNamespace" "getExportedValue" "::" "eval" "eval" "withVisible" "source" ".x" 
"vapply" "compact" "unlist" "recurse" "FUN" "lapply" "vapply" "compact" "unlist" "recurse" "FUN" "lapply" "vapply" "compact" "unlist" "recurse" "FUN" "lapply" "vapply" "compact" "unlist" "recurse" "FUN" "lapply" "vapply" "compact" "unlist" "recurse" "FUN" "lapply" "vapply" "compact" "unlist" "recurse" "FUN" "lapply" "vapply" "compact" "unlist" "recurse" "FUN" "lapply" "vapply" "compact" "unlist" "recurse" "FUN" "lapply" "vapply" "compact" "unlist" "recurse" "FUN" "lapply" "vapply" "compact" "unlist" "recurse" "FUN" "lapply" "vapply" "compact" "unlist" "recurse" "extract_lang" "wrap_inner_loop" "eval" "FUN" "lapply" "unquote" "bquote" "stopifnot" "make_function" "eval" "eval" "assign" "fun" "doTryCatch" "tryCatchOne" "tryCatchList" "tryCatch" "runHook" "loadNamespace" "asNamespace" "namespaceImportFrom" "loadNamespace" "doTryCatch" "tryCatchOne" "tryCatchList" "tryCatch" "getNamespace" "asNamespace" "getExportedValue" "::" "eval" "eval" "withVisible" "source" ".x" 
"vapply" "compact" "unlist" "recurse" "FUN" "lapply" "vapply" "compact" "unlist" "recurse" "FUN" "lapply" "vapply" "compact" "unlist" "recurse" "FUN" "lapply" "vapply" "compact" "unlist" "recurse" "FUN" "lapply" "vapply" "compact" "unlist" "recurse" "FUN" "lapply" "vapply" "compact" "unlist" "recurse" "FUN" "lapply" "vapply" "compact" "unlist" "recurse" "FUN" "lapply" "vapply" "compact" "unlist" "recurse" "FUN" "lapply" "vapply" "compact" "unlist" "recurse" "FUN" "lapply" "vapply" "compact" "unlist" "recurse" "FUN" "lapply" "vapply" "compact" "unlist" "recurse" "extract_lang" "wrap_inner_loop" "eval" "FUN" "lapply" "unquote" "bquote" "stopifnot" "make_function" "eval" "eval" "assign" "fun" "doTryCatch" "tryCatchOne" "tryCatchList" "tryCatch" "runHook" "loadNamespace" "asNamespace" "namespaceImportFrom" "loadNamespace" "doTryCatch" "tryCatchOne" "tryCatchList" "tryCatch" "getNamespace" "asNamespace" "getExportedValue" "::" "eval" "eval" "withVisible" "source" ".x" 
"identical" "FUN" "lapply" "vapply" "compact" "unlist" "recurse" "FUN" "lapply" "vapply" "compact" "unlist" "recurse" "FUN" "lapply" "vapply" "compact" "unlist" "recurse" "FUN" "lapply" "vapply" "compact" "unlist" "recurse" "FUN" "lapply" "vapply" "compact" "unlist" "recurse" "FUN" "lapply" "vapply" "compact" "unlist" "recurse" "extract_lang" "wrap_inner_loop" "eval" "FUN" "lapply" "unquote" "bquote" "stopifnot" "make_function" "eval" "eval" "assign" "fun" "doTryCatch" "tryCatchOne" "tryCatchList" "tryCatch" "runHook" "loadNamespace" "asNamespace" "namespaceImportFrom" "loadNamespace" "doTryCatch" "tryCatchOne" "tryCatchList" "tryCatch" "getNamespace" "asNamespace" "getExportedValue" "::" "eval" "eval" "withVisible" "source" ".x" 
"identical" "f" "isTRUE" "FUN" "lapply" "vapply" "compact" "unlist" "recurse" "FUN" "lapply" "vapply" "compact" "unlist" "recurse" "FUN" "lapply" "vapply" "compact" "unlist" "recurse" "FUN" "lapply" "vapply" "compact" "unlist" "recurse" "FUN" "lapply" "vapply" "compact" "unlist" "recurse" "FUN" "lapply" "vapply" "compact" "unlist" "recurse" "FUN" "lapply" "vapply" "compact" "unlist" "recurse" "extract_lang" "comp_lang" "f" "modify_lang" "eval" "FUN" "lapply" "unquote" "bquote" "stopifnot" "make_function" "eval" "eval" "assign" "fun" "doTryCatch" "tryCatchOne" "tryCatchList" "tryCatch" "runHook" "loadNamespace" "asNamespace" "namespaceImportFrom" "loadNamespace" "doTryCatch" "tryCatchOne" "tryCatchList" "tryCatch" "getNamespace" "asNamespace" "getExportedValue" "::" "eval" "eval" "withVisible" "source" ".x" 
"identical" "f" "isTRUE" "FUN" "lapply" "vapply" "compact" "unlist" "recurse" "FUN" "lapply" "vapply" "compact" "unlist" "recurse" "FUN" "lapply" "vapply" "compact" "unlist" "recurse" "FUN" "lapply" "vapply" "compact" "unlist" "recurse" "FUN" "lapply" "vapply" "compact" "unlist" "recurse" "FUN" "lapply" "vapply" "compact" "unlist" "recurse" "FUN" "lapply" "vapply" "compact" "unlist" "recurse" "FUN" "lapply" "vapply" "compact" "unlist" "recurse" "FUN" "lapply" "vapply" "compact" "unlist" "recurse" "FUN" "lapply" "vapply" "compact" "unlist" "recurse" "FUN" "lapply" "vapply" "compact" "unlist" "recurse" "FUN" "lapply" "vapply" "compact" "unlist" "recurse" "extract_lang" "eval" "eval" "eval" "assign" "fun" "doTryCatch" "tryCatchOne" "tryCatchList" "tryCatch" "runHook" "loadNamespace" "asNamespace" "namespaceImportFrom" "loadNamespace" "doTryCatch" "tryCatchOne" "tryCatchList" "tryCatch" "getNamespace" "asNamespace" "getExportedValue" "::" "eval" "eval" "withVisible" "source" ".x" 
"isTRUE" "FUN" "lapply" "vapply" "compact" "unlist" "recurse" "FUN" "lapply" "vapply" "compact" "unlist" "recurse" "FUN" "lapply" "vapply" "compact" "unlist" "recurse" "FUN" "lapply" "vapply" "compact" "unlist" "recurse" "FUN" "lapply" "vapply" "compact" "unlist" "recurse" "FUN" "lapply" "vapply" "compact" "unlist" "recurse" "extract_lang" "eval" "eval" "eval" "assign" "fun" "doTryCatch" "tryCatchOne" "tryCatchList" "tryCatch" "runHook" "loadNamespace" "asNamespace" "namespaceImportFrom" "loadNamespace" "doTryCatch" "tryCatchOne" "tryCatchList" "tryCatch" "getNamespace" "asNamespace" "getExportedValue" "::" "eval" "eval" "withVisible" "source" ".x" 
"FUN" "lapply" "vapply" "compact" "unlist" "recurse" "FUN" "lapply" "vapply" "compact" "unlist" "recurse" "FUN" "lapply" "vapply" "compact" "unlist" "recurse" "FUN" "lapply" "vapply" "compact" "unlist" "recurse" "FUN" "lapply" "vapply" "compact" "unlist" "recurse" "extract_lang" "eval" "eval" "eval" "assign" "fun" "doTryCatch" "tryCatchOne" "tryCatchList" "tryCatch" "runHook" "loadNamespace" "asNamespace" "namespaceImportFrom" "loadNamespace" "doTryCatch" "tryCatchOne" "tryCatchList" "tryCatch" "getNamespace" "asNamespace" "getExportedValue" "::" "eval" "eval" "withVisible" "source" ".x" 
"isTRUE" "FUN" "lapply" "vapply" "compact" "unlist" "recurse" "FUN" "lapply" "vapply" "compact" "unlist" "recurse" "FUN" "lapply" "vapply" "compact" "unlist" "recurse" "FUN" "lapply" "vapply" "compact" "unlist" "recurse" "FUN" "lapply" "vapply" "compact" "unlist" "recurse" "FUN" "lapply" "vapply" "compact" "unlist" "recurse" "FUN" "lapply" "vapply" "compact" "unlist" "recurse" "FUN" "lapply" "vapply" "compact" "unlist" "recurse" "FUN" "lapply" "vapply" "compact" "unlist" "recurse" "FUN" "lapply" "vapply" "compact" "unlist" "recurse" "FUN" "lapply" "vapply" "compact" "unlist" "recurse" "FUN" "lapply" "vapply" "compact" "unlist" "recurse" "FUN" "lapply" "vapply" "compact" "unlist" "recurse" "FUN" "lapply" "vapply" "compact" "unlist" "recurse" "extract_lang" "eval" "eval" "eval" "assign" "fun" "doTryCatch" "tryCatchOne" "tryCatchList" "tryCatch" "runHook" "loadNamespace" "asNamespace" "namespaceImportFrom" "loadNamespace" "doTryCatch" "tryCatchOne" "tryCatchList" "tryCatch" "getNamespace" "asNamespace" "getExportedValue" "::" "eval" "eval" "withVisible" "source" ".x" 
"vapply" "compact" "unlist" "recurse" "FUN" "lapply" "vapply" "compact" "unlist" "recurse" "FUN" "lapply" "vapply" "compact" "unlist" "recurse" "FUN" "lapply" "vapply" "compact" "unlist" "recurse" "FUN" "lapply" "vapply" "compact" "unlist" "recurse" "FUN" "lapply" "vapply" "compact" "unlist" "recurse" "extract_lang" "comp_lang" "f" "modify_lang" "eval" "eval" "eval" "assign" "fun" "doTryCatch" "tryCatchOne" "tryCatchList" "tryCatch" "runHook" "loadNamespace" "asNamespace" "namespaceImportFrom" "loadNamespace" "doTryCatch" "tryCatchOne" "tryCatchList" "tryCatch" "getNamespace" "asNamespace" "getExportedValue" "::" "eval" "eval" "withVisible" "source" ".x" 
"FUN" "lapply" "recurse" "FUN" "lapply" "recurse" "FUN" "lapply" "recurse" "FUN" "lapply" "recurse" "FUN" "lapply" "recurse" "FUN" "lapply" "recurse" "FUN" "lapply" "recurse" "FUN" "lapply" "recurse" "FUN" "lapply" "recurse" "FUN" "lapply" "recurse" "FUN" "lapply" "recurse" "modify_lang" "f" "isTRUE" "extract_lang" "stopifnot" "make_function" "eval" "eval" "assign" "fun" "doTryCatch" "tryCatchOne" "tryCatchList" "tryCatch" "runHook" "loadNamespace" "asNamespace" "namespaceImportFrom" "loadNamespace" "doTryCatch" "tryCatchOne" "tryCatchList" "tryCatch" "getNamespace" "asNamespace" "getExportedValue" "::" "eval" "eval" "withVisible" "source" ".x" 
"compact" "unlist" "recurse" "FUN" "lapply" "vapply" "compact" "unlist" "recurse" "FUN" "lapply" "vapply" "compact" "unlist" "recurse" "FUN" "lapply" "vapply" "compact" "unlist" "recurse" "FUN" "lapply" "vapply" "compact" "unlist" "recurse" "FUN" "lapply" "vapply" "compact" "unlist" "recurse" "FUN" "lapply" "vapply" "compact" "unlist" "recurse" "extract_lang" "stopifnot" "make_function" "eval" "eval" "assign" "fun" "doTryCatch" "tryCatchOne" "tryCatchList" "tryCatch" "runHook" "loadNamespace" "asNamespace" "namespaceImportFrom" "loadNamespace" "doTryCatch" "tryCatchOne" "tryCatchList" "tryCatch" "getNamespace" "asNamespace" "getExportedValue" "::" "eval" "eval" "withVisible" "source" ".x" 
"%in%" "loadNamespace" "doTryCatch" "tryCatchOne" "tryCatchList" "tryCatch" "getNamespace" "asNamespace" "getExportedValue" "::" "fun" "doTryCatch" "tryCatchOne" "tryCatchList" "tryCatch" "runHook" "loadNamespace" "asNamespace" "namespaceImportFrom" "loadNamespace" "asNamespace" "namespaceImportFrom" "loadNamespace" "doTryCatch" "tryCatchOne" "tryCatchList" "tryCatch" "getNamespace" "asNamespace" "getExportedValue" "::" "eval" "eval" "withVisible" "source" ".x" 
".getNamespaceInfo" "getNamespaceName" "structure" "addImports" "namespaceImportFrom" "loadNamespace" "asNamespace" "namespaceImportFrom" "loadNamespace" "asNamespace" "namespaceImportFrom" "loadNamespace" "asNamespace" "namespaceImportFrom" "loadNamespace" "asNamespace" "namespaceImportFrom" "loadNamespace" "doTryCatch" "tryCatchOne" "tryCatchList" "tryCatch" "getNamespace" "asNamespace" "getExportedValue" "::" "eval" "eval" "withVisible" "source" ".x" 
"sys.call" "match.call" "remove" ".resetInheritedMethods" ".updateMethodsInTable" "methods::cacheMetaData" "loadNamespace" "asNamespace" "namespaceImportFrom" "loadNamespace" "asNamespace" "namespaceImportFrom" "loadNamespace" "doTryCatch" "tryCatchOne" "tryCatchList" "tryCatch" "getNamespace" "asNamespace" "getExportedValue" "::" "eval" "eval" "withVisible" "source" ".x" 
"readRDS" "loadNamespace" "asNamespace" "namespaceImportFrom" "loadNamespace" "asNamespace" "namespaceImportFrom" "loadNamespace" "asNamespace" "namespaceImportFrom" "loadNamespace" "doTryCatch" "tryCatchOne" "tryCatchList" "tryCatch" "getNamespace" "asNamespace" "getExportedValue" "::" "eval" "eval" "withVisible" "source" ".x" 
"finalDefaultMethod" "cacheGenericsMetaData" "methods::cacheMetaData" "loadNamespace" "asNamespace" "namespaceImportFrom" "loadNamespace" "asNamespace" "namespaceImportFrom" "loadNamespace" "asNamespace" "namespaceImportFrom" "loadNamespace" "doTryCatch" "tryCatchOne" "tryCatchList" "tryCatch" "getNamespace" "asNamespace" "getExportedValue" "::" "eval" "eval" "withVisible" "source" ".x" 
"is" "getGeneric" ".recMembers" "Recall" ".recMembers" "getGroupMembers" ".checkGroupSigLength" "Recall" ".checkGroupSigLength" ".updateMethodsInTable" ".updateMethodsInTable" ".updateMethodsInTable" "methods::cacheMetaData" "loadNamespace" "asNamespace" "namespaceImportFrom" "loadNamespace" "asNamespace" "namespaceImportFrom" "loadNamespace" "asNamespace" "namespaceImportFrom" "loadNamespace" "doTryCatch" "tryCatchOne" "tryCatchList" "tryCatch" "getNamespace" "asNamespace" "getExportedValue" "::" "eval" "eval" "withVisible" "source" ".x" 
".identC" "is" "cacheGenericsMetaData" "Recall" "cacheGenericsMetaData" "Recall" "cacheGenericsMetaData" "methods::cacheMetaData" "loadNamespace" "asNamespace" "namespaceImportFrom" "loadNamespace" "asNamespace" "namespaceImportFrom" "loadNamespace" "asNamespace" "namespaceImportFrom" "loadNamespace" "doTryCatch" "tryCatchOne" "tryCatchList" "tryCatch" "getNamespace" "asNamespace" "getExportedValue" "::" "eval" "eval" "withVisible" "source" ".x" 
"lazyLoadDBfetch" "get0" "getExportedValue" "::" "eval" "eval" "withVisible" "source" ".x" 
"utils::download.file" "withCallingHandlers" "suppressWarnings" "base_download" "download" "doTryCatch" "tryCatchOne" "tryCatchList" "tryCatch" "github_has_submodules" "remote_download.github_remote" "remotes:::remote_download" "get_source" "auto::check" "eval" "eval" "withVisible" "source" ".x" 
"utils::download.file" "withCallingHandlers" "suppressWarnings" "base_download" "download" "remote_download.github_remote" "remotes:::remote_download" "get_source" "auto::check" "eval" "eval" "withVisible" "source" ".x" 
"utils::download.file" "withCallingHandlers" "suppressWarnings" "base_download" "download" "remote_download.github_remote" "remotes:::remote_download" "get_source" "auto::check" "eval" "eval" "withVisible" "source" ".x" 
"lapply" "FUN" "lapply" "assignNativeRoutines" "loadNamespace" "namespaceImport" "loadNamespace" "namespaceImport" "loadNamespace" "doTryCatch" "tryCatchOne" "tryCatchList" "tryCatch" "requireNamespace" "check_dep_version" "check_suggested" "document" "devtools::check" "run_checks" "auto::check" "eval" "eval" "withVisible" "source" ".x" 
"cb$setcurexpr" "cmpCall" "cmp" "genCode" "cb$putconst" "cmpCallArgs" "cmpCallSymFun" "cmpCall" "cmp" "h" "tryInline" "cmpCall" "cmp" "genCode" "cmpfun" "doTryCatch" "tryCatchOne" "tryCatchList" "tryCatch" "compiler:::tryCmpfun" "parse_deps" "suggests_dep" "check_suggested" "load_all" "document" "devtools::check" "run_checks" "auto::check" "eval" "eval" "withVisible" "source" ".x" 
"cmpCall" "cmp" "cmpSymbolAssign" "h" "tryInline" "cmpCall" "cmp" "h" "tryInline" "cmpCall" "cmp" "genCode" "cmpfun" "doTryCatch" "tryCatchOne" "tryCatchList" "tryCatch" "compiler:::tryCmpfun" "package_file" "as.package" "load_all" "document" "devtools::check" "run_checks" "auto::check" "eval" "eval" "withVisible" "source" ".x" 
"gc" "unload_dll" "unload" "load_all" "document" "devtools::check" "run_checks" "auto::check" "eval" "eval" "withVisible" "source" ".x" 
"gc" "unload_dll" "unload" "load_all" "document" "devtools::check" "run_checks" "auto::check" "eval" "eval" "withVisible" "source" ".x" 
"gc" "unload_dll" "unload" "load_all" "document" "devtools::check" "run_checks" "auto::check" "eval" "eval" "withVisible" "source" ".x" 
"gc" "unload_dll" "load_all" "document" "devtools::check" "run_checks" "auto::check" "eval" "eval" "withVisible" "source" ".x" 
"gc" "unload_dll" "load_all" "document" "devtools::check" "run_checks" "auto::check" "eval" "eval" "withVisible" "source" ".x" 
"lazyLoadDBfetch" "parse_ns_file" "setup_ns_imports" "create_ns_env" "load_all" "document" "devtools::check" "run_checks" "auto::check" "eval" "eval" "withVisible" "source" ".x" 
"cmpBuiltinArgs" "h" "tryInline" "cmpCall" "cmp" "genCode" "cb$putconst" "cmpCallArgs" "cmpCallSymFun" "cmpCall" "cmp" "cmpSymbolAssign" "h" "tryInline" "cmpCall" "cmp" "h" "tryInline" "cmpCall" "cmp" "genCode" "cmpfun" "doTryCatch" "tryCatchOne" "tryCatchList" "tryCatch" "compiler:::tryCmpfun" "run_pkg_hook" "load_all" "document" "devtools::check" "run_checks" "auto::check" "eval" "eval" "withVisible" "source" ".x" 
".Call" "stri_trim_both" "FUN" "lapply" "read.description" "update_roxygen_version" "roxygen2::roxygenise" "force" "withr::with_envvar" "document" "devtools::check" "run_checks" "auto::check" "eval" "eval" "withVisible" "source" ".x" 
".Call" "stri_trim_both" "str_trim" "<Anonymous>" "FUN" "lapply" "vapply" "compact" "parse_preref" "<Anonymous>" "mapply" "Map" "FUN" "lapply" "parse_package" "roxygen2::roxygenise" "force" "withr::with_envvar" "document" "devtools::check" "run_checks" "auto::check" "eval" "eval" "withVisible" "source" ".x" 
"unlist" "unique" "findLocalsList1" "FUN" "lapply" "unlist" "unique" "findLocalsList1" "FUN" "lapply" "unlist" "unique" "findLocalsList1" "unique" "FUN" "lapply" "unlist" "unique" "findLocalsList1" "FUN" "lapply" "unlist" "unique" "findLocalsList1" "FUN" "lapply" "unlist" "unique" "findLocalsList1" "FUN" "lapply" "unlist" "unique" "findLocalsList1" "FUN" "lapply" "unlist" "unique" "findLocalsList1" "findLocalsList" "funEnv" "make.functionContext" "cmpfun" "doTryCatch" "tryCatchOne" "tryCatchList" "tryCatch" "compiler:::tryCmpfun" "parse_description" "parse_preref" "<Anonymous>" "mapply" "Map" "FUN" "lapply" "parse_package" "roxygen2::roxygenise" "force" "withr::with_envvar" "document" "devtools::check" "run_checks" "auto::check" "eval" "eval" "withVisible" "source" ".x" 
"offset" "cb$patchlabels" "codeBufCode" "genCode" "cmpfun" "doTryCatch" "tryCatchOne" "tryCatchList" "tryCatch" "compiler:::tryCmpfun" "parse_description" "parse_preref" "<Anonymous>" "mapply" "Map" "FUN" "lapply" "parse_package" "roxygen2::roxygenise" "force" "withr::with_envvar" "document" "devtools::check" "run_checks" "auto::check" "eval" "eval" "withVisible" "source" ".x" 
"ls" "%in%" "FUN" "lapply" "vapply" "compact" "parse_preref" "<Anonymous>" "mapply" "Map" "FUN" "lapply" "parse_package" "roxygen2::roxygenise" "force" "withr::with_envvar" "document" "devtools::check" "run_checks" "auto::check" "eval" "eval" "withVisible" "source" ".x" 
"h" "tryInline" "cmpCall" "cmp" "h" "tryInline" "cmpCall" "cmp" "h" "tryInline" "cmpCall" "cmp" "h" "tryInline" "cmpCall" "cmp" "h" "tryInline" "cmpCall" "cmp" "h" "tryInline" "cmpCall" "cmp" "cmpForBody" "h" "tryInline" "cmpCall" "cmp" "h" "tryInline" "cmpCall" "cmp" "genCode" "cmpfun" "doTryCatch" "tryCatchOne" "tryCatchList" "tryCatch" "compiler:::tryCmpfun" "FUN" "vapply" "fix_replacement" "stri_replace_all_regex" "str_replace_all" "paste0" "quote_if_needed" "paste0" "one_per_line" "export" "default_export.default" "default_export" "FUN" "lapply" "FUN" "lapply" "FUN" "lapply" "unlist" "%||%" "roc_process.namespace" "roc_process" "FUN" "lapply" "unlist" "roxygen2::roxygenise" "force" "withr::with_envvar" "document" "devtools::check" "run_checks" "auto::check" "eval" "eval" "withVisible" "source" ".x" 
"unique.default" "unique" "findLocalsList1" "FUN" "lapply" "unlist" "unique" "findLocalsList1" "findLocalsList" "funEnv" "make.functionContext" "h" "tryInline" "cmpCall" "cmp" "cmpSymbolAssign" "h" "tryInline" "cmpCall" "cmp" "h" "tryInline" "cmpCall" "cmp" "genCode" "cmpfun" "doTryCatch" "tryCatchOne" "tryCatchList" "tryCatch" "compiler:::tryCmpfun" "digest::digest" "same_contents" "write_if_different" "roc_output.namespace" "roc_output" "FUN" "lapply" "unlist" "roxygen2::roxygenise" "force" "withr::with_envvar" "document" "devtools::check" "run_checks" "auto::check" "eval" "eval" "withVisible" "source" ".x" 
"unique.default" "unique" "findLocalsList1" "FUN" "lapply" "unlist" "unique" "findLocalsList1" "FUN" "lapply" "unlist" "unique" "findLocalsList1" "FUN" "lapply" "unlist" "unique" "findLocalsList1" "FUN" "lapply" "unlist" "unique" "findLocalsList1" "findLocalsList" "funEnv" "make.functionContext" "cmpfun" "doTryCatch" "tryCatchOne" "tryCatchList" "tryCatch" "compiler:::tryCmpfun" "block_to_rd" "roc_process.rd_roclet" "roc_process" "FUN" "lapply" "unlist" "roxygen2::roxygenise" "force" "withr::with_envvar" "document" "devtools::check" "run_checks" "auto::check" "eval" "eval" "withVisible" "source" ".x" 
"findCenvVar" "findLocVar" "cmpCall" "cmp" "genCode" "cb$putconst" "cmpCallArgs" "cmpCallSymFun" "cmpCall" "cmp" "h" "tryInline" "cmpCall" "cmp" "genCode" "cmpfun" "doTryCatch" "tryCatchOne" "tryCatchList" "tryCatch" "compiler:::tryCmpfun" "block_to_rd" "roc_process.rd_roclet" "roc_process" "FUN" "lapply" "unlist" "roxygen2::roxygenise" "force" "withr::with_envvar" "document" "devtools::check" "run_checks" "auto::check" "eval" "eval" "withVisible" "source" ".x" 
"findCenvVar" "getInlineInfo" "trySetterInline" "cmpSetterCall" "cmpComplexAssign" "h" "tryInline" "cmpCall" "cmp" "h" "tryInline" "cmpCall" "cmp" "genCode" "cmpfun" "doTryCatch" "tryCatchOne" "tryCatchList" "tryCatch" "compiler:::tryCmpfun" "process_templates" "block_to_rd" "roc_process.rd_roclet" "roc_process" "FUN" "lapply" "unlist" "roxygen2::roxygenise" "force" "withr::with_envvar" "document" "devtools::check" "run_checks" "auto::check" "eval" "eval" "withVisible" "source" ".x" 
"frameTypes" "structure" "makeCenv" "structure" "make.toplevelContext" "cmpfun" "doTryCatch" "tryCatchOne" "tryCatchList" "tryCatch" "compiler:::tryCmpfun" "merge.rd_file" "roc_process.rd_roclet" "roc_process" "FUN" "lapply" "unlist" "roxygen2::roxygenise" "force" "withr::with_envvar" "document" "devtools::check" "run_checks" "auto::check" "eval" "eval" "withVisible" "source" ".x" 
"dots" "build_rd" "paste0" "paste0" "rd_tag" "format.usage_tag" "FUN" "lapply" "format.rd_file" "FUN" "vapply" "roc_output.rd_roclet" "roc_output" "FUN" "lapply" "unlist" "roxygen2::roxygenise" "force" "withr::with_envvar" "document" "devtools::check" "run_checks" "auto::check" "eval" "eval" "withVisible" "source" ".x" 
"system" "withCallingHandlers" "suppressWarnings" "Sys.which" "lapply" "unlist" "Filter" "aspell_find_program" "utils::aspell" "doTryCatch" "tryCatchOne" "tryCatchList" "tryCatch" "aspell_env_var" "check_env_vars" "check_built" "devtools::check" "run_checks" "auto::check" "eval" "eval" "withVisible" "source" ".x" 
"system" "force" "withr::with_envvar" "force" "withr::with_dir" "withCallingHandlers" "suppressWarnings" "fun" "R" "check_built" "devtools::check" "run_checks" "auto::check" "eval" "eval" "withVisible" "source" ".x" 
"Sys.getenv" "tolower" "config_val_to_logical" "parse_Rd" "loadRdMacros" "initialRdMacros" "parse_Rd" "tools::RdTextFilter" "FUN" "lapply" "devtools::spell_check" "run_checks" "auto::check" "eval" "eval" "withVisible" "source" ".x" 
"lengths" "unique" "simplify2array" "sapply" "RdTags" "show" "show" "tools::RdTextFilter" "FUN" "lapply" "devtools::spell_check" "run_checks" "auto::check" "eval" "eval" "withVisible" "source" ".x" 
".Call" "R_hunspell_dict" "dictionary_internal" "dictionary" "hunspell::hunspell" "spell_check_text" "FUN" "lapply" "devtools::spell_check" "run_checks" "auto::check" "eval" "eval" "withVisible" "source" ".x" 
".Call" "R_hunspell_dict" "dictionary_internal" "dictionary" "hunspell::hunspell" "spell_check_text" "FUN" "lapply" "devtools::spell_check" "run_checks" "auto::check" "eval" "eval" "withVisible" "source" ".x" 
"as.character" "as.character" "show" "show" "show" "show" "show" "tools::RdTextFilter" "FUN" "lapply" "devtools::spell_check" "run_checks" "auto::check" "eval" "eval" "withVisible" "source" ".x" 
"sapply" "RdTags" "show" "show" "tools::RdTextFilter" "FUN" "lapply" "devtools::spell_check" "run_checks" "auto::check" "eval" "eval" "withVisible" "source" ".x" 
"rm" "close.srcfile" "close" "getSrcLines" "doTryCatch" "tryCatchOne" "tryCatchList" "tryCatch" "try" "as.character.srcref" "as.character" "as.character" "show" "show" "show" "tools::RdTextFilter" "FUN" "lapply" "devtools::spell_check" "run_checks" "auto::check" "eval" "eval" "withVisible" "source" ".x" 
"$" "open.srcfile" "open" "getSrcLines" "doTryCatch" "tryCatchOne" "tryCatchList" "tryCatch" "try" "as.character.srcref" "as.character" "as.character" "show" "show" "show" "tools::RdTextFilter" "FUN" "lapply" "devtools::spell_check" "run_checks" "auto::check" "eval" "eval" "withVisible" "source" ".x" 
".Call" "R_hunspell_find" "hunspell::hunspell" "spell_check_text" "FUN" "lapply" "devtools::spell_check" "run_checks" "auto::check" "eval" "eval" "withVisible" "source" ".x" 
"lazyLoadDBfetch" "get0" "getExportedValue" "::" "run_checks" "auto::check" "eval" "eval" "withVisible" "source" ".x" 
"read.dcf" "read_dcf" "idesc_create_text" "idesc_create_file" "idesc_create" "<Anonymous>" "description$new" "desc_get" "goodpractice::gp" "run_checks" "auto::check" "eval" "eval" "withVisible" "source" ".x" 
"make.nonTailCallContext" "cmpSymbolAssign" "h" "tryInline" "cmpCall" "cmp" "h" "tryInline" "cmpCall" "cmp" "h" "tryInline" "cmpCall" "cmp" "h" "tryInline" "cmpCall" "cmp" "genCode" "cmpfun" "doTryCatch" "tryCatchOne" "tryCatchList" "tryCatch" "compiler:::tryCmpfun" "description$new" "desc_get" "cyclocomp_package_dir" "MYPREPS[[prep]]" "goodpractice::gp" "run_checks" "auto::check" "eval" "eval" "withVisible" "source" ".x" 
"findCenvVar" "findLocVar" "cmpCall" "cmp" "cmpForBody" "h" "tryInline" "cmpCall" "cmp" "h" "tryInline" "cmpCall" "cmp" "genCode" "cmpfun" "doTryCatch" "tryCatchOne" "tryCatchList" "tryCatch" "compiler:::tryCmpfun" "description$new" "desc_get" "cyclocomp_package_dir" "MYPREPS[[prep]]" "goodpractice::gp" "run_checks" "auto::check" "eval" "eval" "withVisible" "source" ".x" 
"mayCallBrowser" "mayCallBrowserList" "mayCallBrowser" "cmpfun" "doTryCatch" "tryCatchOne" "tryCatchList" "tryCatch" "compiler:::tryCmpfun" "read_dcf" "idesc_create_text" "idesc_create_file" "idesc_create" "<Anonymous>" "description$new" "desc_get" "cyclocomp_package_dir" "MYPREPS[[prep]]" "goodpractice::gp" "run_checks" "auto::check" "eval" "eval" "withVisible" "source" ".x" 
"system" "utils::untar" "untar" "gsub" "nchar" "getrootdir" "decompress" "source_pkg" "FUN" "vapply" "install_remotes" "install_local" "cyclocomp_package_dir" "MYPREPS[[prep]]" "goodpractice::gp" "run_checks" "auto::check" "eval" "eval" "withVisible" "source" ".x" 
"readRDS" "doTryCatch" "tryCatchOne" "tryCatchList" "tryCatch" "utils::available.packages" "withCallingHandlers" "suppressWarnings" "available_packages" "package_deps" "dev_package_deps" "install_deps" "install" "FUN" "vapply" "install_remotes" "install_local" "cyclocomp_package_dir" "MYPREPS[[prep]]" "goodpractice::gp" "run_checks" "auto::check" "eval" "eval" "withVisible" "source" ".x" 
"readRDS" "doTryCatch" "tryCatchOne" "tryCatchList" "tryCatch" "utils::available.packages" "withCallingHandlers" "suppressWarnings" "available_packages" "package_deps" "dev_package_deps" "install_deps" "install" "FUN" "vapply" "install_remotes" "install_local" "cyclocomp_package_dir" "MYPREPS[[prep]]" "goodpractice::gp" "run_checks" "auto::check" "eval" "eval" "withVisible" "source" ".x" 
"readRDS" "doTryCatch" "tryCatchOne" "tryCatchList" "tryCatch" "utils::available.packages" "withCallingHandlers" "suppressWarnings" "available_packages" "package_deps" "dev_package_deps" "install_deps" "install" "FUN" "vapply" "install_remotes" "install_local" "cyclocomp_package_dir" "MYPREPS[[prep]]" "goodpractice::gp" "run_checks" "auto::check" "eval" "eval" "withVisible" "source" ".x" 
"readRDS" "doTryCatch" "tryCatchOne" "tryCatchList" "tryCatch" "utils::available.packages" "withCallingHandlers" "suppressWarnings" "available_packages" "package_deps" "dev_package_deps" "install_deps" "install" "FUN" "vapply" "install_remotes" "install_local" "cyclocomp_package_dir" "MYPREPS[[prep]]" "goodpractice::gp" "run_checks" "auto::check" "eval" "eval" "withVisible" "source" ".x" 
"readRDS" "doTryCatch" "tryCatchOne" "tryCatchList" "tryCatch" "utils::available.packages" "withCallingHandlers" "suppressWarnings" "available_packages" "package_deps" "dev_package_deps" "install_deps" "install" "FUN" "vapply" "install_remotes" "install_local" "cyclocomp_package_dir" "MYPREPS[[prep]]" "goodpractice::gp" "run_checks" "auto::check" "eval" "eval" "withVisible" "source" ".x" 
"rownames<-" "utils::available.packages" "withCallingHandlers" "suppressWarnings" "available_packages" "package_deps" "dev_package_deps" "install_deps" "install" "FUN" "vapply" "install_remotes" "install_local" "cyclocomp_package_dir" "MYPREPS[[prep]]" "goodpractice::gp" "run_checks" "auto::check" "eval" "eval" "withVisible" "source" ".x" 
"rownames<-" "utils::available.packages" "withCallingHandlers" "suppressWarnings" "available_packages" "package_deps" "dev_package_deps" "install_deps" "install" "FUN" "vapply" "install_remotes" "install_local" "cyclocomp_package_dir" "MYPREPS[[prep]]" "goodpractice::gp" "run_checks" "auto::check" "eval" "eval" "withVisible" "source" ".x" 
"rownames<-" "utils::available.packages" "withCallingHandlers" "suppressWarnings" "available_packages" "package_deps" "dev_package_deps" "install_deps" "install" "FUN" "vapply" "install_remotes" "install_local" "cyclocomp_package_dir" "MYPREPS[[prep]]" "goodpractice::gp" "run_checks" "auto::check" "eval" "eval" "withVisible" "source" ".x" 
"rownames<-" "utils::available.packages" "withCallingHandlers" "suppressWarnings" "available_packages" "package_deps" "dev_package_deps" "install_deps" "install" "FUN" "vapply" "install_remotes" "install_local" "cyclocomp_package_dir" "MYPREPS[[prep]]" "goodpractice::gp" "run_checks" "auto::check" "eval" "eval" "withVisible" "source" ".x" 
"cbind" "utils::available.packages" "withCallingHandlers" "suppressWarnings" "available_packages" "package_deps" "dev_package_deps" "install_deps" "install" "FUN" "vapply" "install_remotes" "install_local" "cyclocomp_package_dir" "MYPREPS[[prep]]" "goodpractice::gp" "run_checks" "auto::check" "eval" "eval" "withVisible" "source" ".x" 
"cbind" "utils::available.packages" "withCallingHandlers" "suppressWarnings" "available_packages" "package_deps" "dev_package_deps" "install_deps" "install" "FUN" "vapply" "install_remotes" "install_local" "cyclocomp_package_dir" "MYPREPS[[prep]]" "goodpractice::gp" "run_checks" "auto::check" "eval" "eval" "withVisible" "source" ".x" 
"cbind" "utils::available.packages" "withCallingHandlers" "suppressWarnings" "available_packages" "package_deps" "dev_package_deps" "install_deps" "install" "FUN" "vapply" "install_remotes" "install_local" "cyclocomp_package_dir" "MYPREPS[[prep]]" "goodpractice::gp" "run_checks" "auto::check" "eval" "eval" "withVisible" "source" ".x" 
"strsplit" "lapply" "f" "utils::available.packages" "withCallingHandlers" "suppressWarnings" "available_packages" "package_deps" "dev_package_deps" "install_deps" "install" "FUN" "vapply" "install_remotes" "install_local" "cyclocomp_package_dir" "MYPREPS[[prep]]" "goodpractice::gp" "run_checks" "auto::check" "eval" "eval" "withVisible" "source" ".x" 
"grepl" "FUN" "lapply" "f" "utils::available.packages" "withCallingHandlers" "suppressWarnings" "available_packages" "package_deps" "dev_package_deps" "install_deps" "install" "FUN" "vapply" "install_remotes" "install_local" "cyclocomp_package_dir" "MYPREPS[[prep]]" "goodpractice::gp" "run_checks" "auto::check" "eval" "eval" "withVisible" "source" ".x" 
"grepl" "FUN" "lapply" "f" "utils::available.packages" "withCallingHandlers" "suppressWarnings" "available_packages" "package_deps" "dev_package_deps" "install_deps" "install" "FUN" "vapply" "install_remotes" "install_local" "cyclocomp_package_dir" "MYPREPS[[prep]]" "goodpractice::gp" "run_checks" "auto::check" "eval" "eval" "withVisible" "source" ".x" 
"grepl" "FUN" "lapply" "f" "utils::available.packages" "withCallingHandlers" "suppressWarnings" "available_packages" "package_deps" "dev_package_deps" "install_deps" "install" "FUN" "vapply" "install_remotes" "install_local" "cyclocomp_package_dir" "MYPREPS[[prep]]" "goodpractice::gp" "run_checks" "auto::check" "eval" "eval" "withVisible" "source" ".x" 
"grepl" "FUN" "lapply" "f" "utils::available.packages" "withCallingHandlers" "suppressWarnings" "available_packages" "package_deps" "dev_package_deps" "install_deps" "install" "FUN" "vapply" "install_remotes" "install_local" "cyclocomp_package_dir" "MYPREPS[[prep]]" "goodpractice::gp" "run_checks" "auto::check" "eval" "eval" "withVisible" "source" ".x" 
"grepl" "FUN" "lapply" "f" "utils::available.packages" "withCallingHandlers" "suppressWarnings" "available_packages" "package_deps" "dev_package_deps" "install_deps" "install" "FUN" "vapply" "install_remotes" "install_local" "cyclocomp_package_dir" "MYPREPS[[prep]]" "goodpractice::gp" "run_checks" "auto::check" "eval" "eval" "withVisible" "source" ".x" 
"strsplit" "lapply" ".make_numeric_version" "numeric_version" "as.numeric_version" "Ops.numeric_version" ">=" "do.call" "f" "utils::available.packages" "withCallingHandlers" "suppressWarnings" "available_packages" "package_deps" "dev_package_deps" "install_deps" "install" "FUN" "vapply" "install_remotes" "install_local" "cyclocomp_package_dir" "MYPREPS[[prep]]" "goodpractice::gp" "run_checks" "auto::check" "eval" "eval" "withVisible" "source" ".x" 
"sprintf" "FUN" "lapply" ".encode_numeric_version" "split" "Ops.numeric_version" ">=" "do.call" "f" "utils::available.packages" "withCallingHandlers" "suppressWarnings" "available_packages" "package_deps" "dev_package_deps" "install_deps" "install" "FUN" "vapply" "install_remotes" "install_local" "cyclocomp_package_dir" "MYPREPS[[prep]]" "goodpractice::gp" "run_checks" "auto::check" "eval" "eval" "withVisible" "source" ".x" 
"strrep" "paste0" "strlpad" "paste" "FUN" "vapply" ".encode_numeric_version" "split" "Ops.numeric_version" ">=" "do.call" "f" "utils::available.packages" "withCallingHandlers" "suppressWarnings" "available_packages" "package_deps" "dev_package_deps" "install_deps" "install" "FUN" "vapply" "install_remotes" "install_local" "cyclocomp_package_dir" "MYPREPS[[prep]]" "goodpractice::gp" "run_checks" "auto::check" "eval" "eval" "withVisible" "source" ".x" 
"FUN" "vapply" ".encode_numeric_version" "split" "Ops.numeric_version" ">=" "do.call" "f" "utils::available.packages" "withCallingHandlers" "suppressWarnings" "available_packages" "package_deps" "dev_package_deps" "install_deps" "install" "FUN" "vapply" "install_remotes" "install_local" "cyclocomp_package_dir" "MYPREPS[[prep]]" "goodpractice::gp" "run_checks" "auto::check" "eval" "eval" "withVisible" "source" ".x" 
"paste0" "strlpad" "paste" "FUN" "vapply" ".encode_numeric_version" "split" "Ops.numeric_version" ">=" "do.call" "f" "utils::available.packages" "withCallingHandlers" "suppressWarnings" "available_packages" "package_deps" "dev_package_deps" "install_deps" "install" "FUN" "vapply" "install_remotes" "install_local" "cyclocomp_package_dir" "MYPREPS[[prep]]" "goodpractice::gp" "run_checks" "auto::check" "eval" "eval" "withVisible" "source" ".x" 
"f" "utils::available.packages" "withCallingHandlers" "suppressWarnings" "available_packages" "package_deps" "dev_package_deps" "install_deps" "install" "FUN" "vapply" "install_remotes" "install_local" "cyclocomp_package_dir" "MYPREPS[[prep]]" "goodpractice::gp" "run_checks" "auto::check" "eval" "eval" "withVisible" "source" ".x" 
"f" "utils::available.packages" "withCallingHandlers" "suppressWarnings" "available_packages" "package_deps" "dev_package_deps" "install_deps" "install" "FUN" "vapply" "install_remotes" "install_local" "cyclocomp_package_dir" "MYPREPS[[prep]]" "goodpractice::gp" "run_checks" "auto::check" "eval" "eval" "withVisible" "source" ".x" 
"f" "utils::available.packages" "withCallingHandlers" "suppressWarnings" "available_packages" "package_deps" "dev_package_deps" "install_deps" "install" "FUN" "vapply" "install_remotes" "install_local" "cyclocomp_package_dir" "MYPREPS[[prep]]" "goodpractice::gp" "run_checks" "auto::check" "eval" "eval" "withVisible" "source" ".x" 
"tryCatch" "try" ".readPkgDesc" "utils::installed.packages" "package_deps" "dev_package_deps" "install_deps" "install" "FUN" "vapply" "install_remotes" "install_local" "cyclocomp_package_dir" "MYPREPS[[prep]]" "goodpractice::gp" "run_checks" "auto::check" "eval" "eval" "withVisible" "source" ".x" 
"format.numeric_version" "format" "as.character.numeric_version" "as.character" "as.character" ".readPkgDesc" "utils::installed.packages" "package_deps" "dev_package_deps" "install_deps" "install" "FUN" "vapply" "install_remotes" "install_local" "cyclocomp_package_dir" "MYPREPS[[prep]]" "goodpractice::gp" "run_checks" "auto::check" "eval" "eval" "withVisible" "source" ".x" 
"deparse" "make_vanilla_script" "r_tmp" "r_internal" "r" "cyclocomp_package_dir" "MYPREPS[[prep]]" "goodpractice::gp" "run_checks" "auto::check" "eval" "eval" "withVisible" "source" ".x" 
"$" "conditionMessage.condition" "conditionMessage" "cat" "defaultHandler" "doWithOneRestart" "withOneRestart" "withRestarts" "message" "goodpractice::gp" "run_checks" "auto::check" "eval" "eval" "withVisible" "source" ".x" 
"parse" "sys.source" "doTryCatch" "tryCatchOne" "tryCatchList" "tryCatch" "try" "loadNamespace" "doTryCatch" "tryCatchOne" "tryCatchList" "tryCatch" "getNamespace" "asNamespace" "get" "%:::%" "get_knitr_pattern" "extract_r_source" "get_source_expressions" "lint" "FUN" "lapply" "inherits" "assign_item" "flatten_list" "structure" "flatten_lints" "lint_package" "withCallingHandlers" "suppressMessages" "MYPREPS[[prep]]" "goodpractice::gp" "run_checks" "auto::check" "eval" "eval" "withVisible" "source" ".x" 
"parse" "doTryCatch" "tryCatchOne" "tryCatchList" "tryCatch" "get_source_file" "get_source_expressions" "lint" "FUN" "lapply" "inherits" "assign_item" "flatten_list" "structure" "flatten_lints" "lint_package" "withCallingHandlers" "suppressMessages" "MYPREPS[[prep]]" "goodpractice::gp" "run_checks" "auto::check" "eval" "eval" "withVisible" "source" ".x" 
".getNamespaceInfo" "getNamespaceImports" "addImports" "namespaceImportFrom" "loadNamespace" "doTryCatch" "tryCatchOne" "tryCatchList" "tryCatch" "getNamespace" "asNamespace" "getExportedValue" "::" "generate_tree" "get_source_expressions" "lint" "FUN" "lapply" "inherits" "assign_item" "flatten_list" "structure" "flatten_lints" "lint_package" "withCallingHandlers" "suppressMessages" "MYPREPS[[prep]]" "goodpractice::gp" "run_checks" "auto::check" "eval" "eval" "withVisible" "source" ".x" 
"paste" "igraph::E" "FUN" "lapply" "get_source_expressions" "lint" "FUN" "lapply" "inherits" "assign_item" "flatten_list" "structure" "flatten_lints" "lint_package" "withCallingHandlers" "suppressMessages" "MYPREPS[[prep]]" "goodpractice::gp" "run_checks" "auto::check" "eval" "eval" "withVisible" "source" ".x" 
"getFoldFun" "constantFoldCall" "constantFold" "cmp" "cmpSubassignDispatch" "h" "trySetterInline" "cmpSetterCall" "cmpComplexAssign" "h" "tryInline" "cmpCall" "cmp" "h" "tryInline" "cmpCall" "cmp" "h" "tryInline" "cmpCall" "cmp" "h" "tryInline" "cmpCall" "cmp" "genCode" "h" "tryInline" "cmpCall" "cmp" "cmpSymbolAssign" "h" "tryInline" "cmpCall" "cmp" "h" "tryInline" "cmpCall" "cmp" "genCode" "cmpfun" "doTryCatch" "tryCatchOne" "tryCatchList" "tryCatch" "compiler:::tryCmpfun" "re_matches" "find_column_fun" "FUN" "lapply" "get_source_expressions" "lint" "FUN" "lapply" "inherits" "assign_item" "flatten_list" "structure" "flatten_lints" "lint_package" "withCallingHandlers" "suppressMessages" "MYPREPS[[prep]]" "goodpractice::gp" "run_checks" "auto::check" "eval" "eval" "withVisible" "source" ".x" 
"getFoldFun" "constantFoldCall" "constantFold" "cmp" "cmpSubsetDispatch" "h" "tryInline" "cmpCall" "cmp" "cmpSymbolAssign" "h" "tryInline" "cmpCall" "cmp" "h" "tryInline" "cmpCall" "cmp" "genCode" "cmpfun" "doTryCatch" "tryCatchOne" "tryCatchList" "tryCatch" "compiler:::tryCmpfun" "FUN" "lapply" "get_source_expressions" "lint" "FUN" "lapply" "inherits" "assign_item" "flatten_list" "structure" "flatten_lints" "lint_package" "withCallingHandlers" "suppressMessages" "MYPREPS[[prep]]" "goodpractice::gp" "run_checks" "auto::check" "eval" "eval" "withVisible" "source" ".x" 
"isNamespace" "findHomeNS" "nsName" "getInlineInfo" "tryInline" "cmpCall" "cmp" "h" "tryInline" "cmpCall" "cmp" "h" "tryInline" "cmpCall" "cmp" "h" "tryInline" "cmpCall" "cmp" "h" "tryInline" "cmpCall" "cmp" "genCode" "cmpfun" "doTryCatch" "tryCatchOne" "tryCatchList" "tryCatch" "compiler:::tryCmpfun" "igraph::E" "FUN" "lapply" "get_source_expressions" "lint" "FUN" "lapply" "inherits" "assign_item" "flatten_list" "structure" "flatten_lints" "lint_package" "withCallingHandlers" "suppressMessages" "MYPREPS[[prep]]" "goodpractice::gp" "run_checks" "auto::check" "eval" "eval" "withVisible" "source" ".x" 
"make.argContext" "cmpSubsetDispatch" "h" "tryInline" "cmpCall" "cmp" "cmpBuiltinArgs" "h" "tryInline" "cmpCall" "cmp" "cmpComplexAssign" "h" "tryInline" "cmpCall" "cmp" "h" "tryInline" "cmpCall" "cmp" "h" "tryInline" "cmpCall" "cmp" "h" "tryInline" "cmpCall" "cmp" "h" "tryInline" "cmpCall" "cmp" "h" "tryInline" "cmpCall" "cmp" "h" "tryInline" "cmpCall" "cmp" "h" "tryInline" "cmpCall" "cmp" "genCode" "cmpfun" "doTryCatch" "tryCatchOne" "tryCatchList" "tryCatch" "compiler:::tryCmpfun" "as.igraph.es" "ends" "igraph::E" "FUN" "lapply" "get_source_expressions" "lint" "FUN" "lapply" "inherits" "assign_item" "flatten_list" "structure" "flatten_lints" "lint_package" "withCallingHandlers" "suppressMessages" "MYPREPS[[prep]]" "goodpractice::gp" "run_checks" "auto::check" "eval" "eval" "withVisible" "source" ".x" 
"lapply" "unlist" "unique" "findLocalsList1" "findLocalsList" "funEnv" "make.functionContext" "h" "tryInline" "cmpCall" "cmp" "cmpSymbolAssign" "h" "tryInline" "cmpCall" "cmp" "h" "tryInline" "cmpCall" "cmp" "genCode" "cmpfun" "doTryCatch" "tryCatchOne" "tryCatchList" "tryCatch" "compiler:::tryCmpfun" "[.igraph.es" "[" "FUN" "lapply" "get_source_expressions" "lint" "FUN" "lapply" "inherits" "assign_item" "flatten_list" "structure" "flatten_lints" "lint_package" "withCallingHandlers" "suppressMessages" "MYPREPS[[prep]]" "goodpractice::gp" "run_checks" "auto::check" "eval" "eval" "withVisible" "source" ".x" 
"nsName" "getInlineInfo" "tryInline" "cmpCall" "cmp" "cmpComplexAssign" "h" "tryInline" "cmpCall" "cmp" "h" "tryInline" "cmpCall" "cmp" "cmpForBody" "h" "tryInline" "cmpCall" "cmp" "h" "tryInline" "cmpCall" "cmp" "h" "tryInline" "cmpCall" "cmp" "h" "tryInline" "cmpCall" "cmp" "genCode" "cmpfun" "doTryCatch" "tryCatchOne" "tryCatchList" "tryCatch" "compiler:::tryCmpfun" "edge.attributes" "edge_attr" "[.igraph.es" "[" "FUN" "lapply" "get_source_expressions" "lint" "FUN" "lapply" "inherits" "assign_item" "flatten_list" "structure" "flatten_lints" "lint_package" "withCallingHandlers" "suppressMessages" "MYPREPS[[prep]]" "goodpractice::gp" "run_checks" "auto::check" "eval" "eval" "withVisible" "source" ".x" 
"graph_version" "warn_version" "get_vs_ref" "update_vs_ref" "V" "match" "as.igraph.vs" "igraph::subcomponent" "inherits" "as.igraph.vs" ".from" "from" "eval" "eval" "FUN" "lapply" "lazy_eval" "[.igraph.es" "[" "FUN" "lapply" "get_source_expressions" "lint" "FUN" "lapply" "inherits" "assign_item" "flatten_list" "structure" "flatten_lints" "lint_package" "withCallingHandlers" "suppressMessages" "MYPREPS[[prep]]" "goodpractice::gp" "run_checks" "auto::check" "eval" "eval" "withVisible" "source" ".x" 
"match.arg" "order" "make.names" "data.frame" "<Anonymous>" "mapply" "re_matches" "find_column_fun" "FUN" "lapply" "get_source_expressions" "lint" "FUN" "lapply" "inherits" "assign_item" "flatten_list" "structure" "flatten_lints" "lint_package" "withCallingHandlers" "suppressMessages" "MYPREPS[[prep]]" "goodpractice::gp" "run_checks" "auto::check" "eval" "eval" "withVisible" "source" ".x" 
"FUN" "lapply" "lazy_eval" "[.igraph.es" "[" "FUN" "lapply" "get_source_expressions" "lint" "FUN" "lapply" "inherits" "assign_item" "flatten_list" "structure" "flatten_lints" "lint_package" "withCallingHandlers" "suppressMessages" "MYPREPS[[prep]]" "goodpractice::gp" "run_checks" "auto::check" "eval" "eval" "withVisible" "source" ".x" 
"$" "cmpSym" "cmp" "h" "tryInline" "cmpCall" "cmp" "cmpSubsetDispatch" "h" "tryInline" "cmpCall" "cmp" "genCode" "cb$putconst" "cmpCallArgs" "cmpCallSymFun" "cmpCall" "cmp" "h" "tryInline" "cmpCall" "cmp" "genCode" "h" "tryInline" "cmpCall" "cmp" "genCode" "cb$putconst" "cmpCallArgs" "cmpCallSymFun" "cmpCall" "cmp" "h" "tryInline" "cmpCall" "cmp" "genCode" "cmpfun" "doTryCatch" "tryCatchOne" "tryCatchList" "tryCatch" "compiler:::tryCmpfun" "dangerous_functions_linter" "linters[[linter]]" "inherits" "assign_item" "flatten_list" "structure" "flatten_lints" "lint" "FUN" "lapply" "inherits" "assign_item" "flatten_list" "structure" "flatten_lints" "lint_package" "withCallingHandlers" "suppressMessages" "MYPREPS[[prep]]" "goodpractice::gp" "run_checks" "auto::check" "eval" "eval" "withVisible" "source" ".x" 
"exists" "findCenvVar" "findFunDef" "cmpCall" "cmp" "cmpSymbolAssign" "h" "tryInline" "cmpCall" "cmp" "h" "tryInline" "cmpCall" "cmp" "genCode" "cmpfun" "doTryCatch" "tryCatchOne" "tryCatchList" "tryCatch" "compiler:::tryCmpfun" "linters[[linter]]" "inherits" "assign_item" "flatten_list" "structure" "flatten_lints" "lint" "FUN" "lapply" "inherits" "assign_item" "flatten_list" "structure" "flatten_lints" "lint_package" "withCallingHandlers" "suppressMessages" "MYPREPS[[prep]]" "goodpractice::gp" "run_checks" "auto::check" "eval" "eval" "withVisible" "source" ".x" 
"get" "getInlineHandler" "tryInline" "cmpCall" "cmp" "h" "tryInline" "cmpCall" "cmp" "h" "tryInline" "cmpCall" "cmp" "h" "tryInline" "cmpCall" "cmp" "genCode" "cmpfun" "doTryCatch" "tryCatchOne" "tryCatchList" "tryCatch" "compiler:::tryCmpfun" "xml_parse_data" "read_xml" "linters[[linter]]" "inherits" "assign_item" "flatten_list" "structure" "flatten_lints" "lint" "FUN" "lapply" "inherits" "assign_item" "flatten_list" "structure" "flatten_lints" "lint_package" "withCallingHandlers" "suppressMessages" "MYPREPS[[prep]]" "goodpractice::gp" "run_checks" "auto::check" "eval" "eval" "withVisible" "source" ".x" 
"is.matrix" "<Anonymous>" "[[.data.frame" "[[" "$.data.frame" "$" "structure" "Lint" "FUN" "lapply" "dangerous_functions_linter" "linters[[linter]]" "inherits" "assign_item" "flatten_list" "structure" "flatten_lints" "lint" "FUN" "lapply" "inherits" "assign_item" "flatten_list" "structure" "flatten_lints" "lint_package" "withCallingHandlers" "suppressMessages" "MYPREPS[[prep]]" "goodpractice::gp" "run_checks" "auto::check" "eval" "eval" "withVisible" "source" ".x" 
"%in%" "[[.data.frame" "[[" "[.data.frame" "[" "xml_parse_data" "read_xml" "linters[[linter]]" "inherits" "assign_item" "flatten_list" "structure" "flatten_lints" "lint" "FUN" "lapply" "inherits" "assign_item" "flatten_list" "structure" "flatten_lints" "lint_package" "withCallingHandlers" "suppressMessages" "MYPREPS[[prep]]" "goodpractice::gp" "run_checks" "auto::check" "eval" "eval" "withVisible" "source" ".x" 
"as.character" "make.unique" "rbind" "rbind" "xml_parse_data" "read_xml" "linters[[linter]]" "inherits" "assign_item" "flatten_list" "structure" "flatten_lints" "lint" "FUN" "lapply" "inherits" "assign_item" "flatten_list" "structure" "flatten_lints" "lint_package" "withCallingHandlers" "suppressMessages" "MYPREPS[[prep]]" "goodpractice::gp" "run_checks" "auto::check" "eval" "eval" "withVisible" "source" ".x" 
"order" "[.data.frame" "[" "xml_parse_data" "read_xml" "linters[[linter]]" "inherits" "assign_item" "flatten_list" "structure" "flatten_lints" "lint" "FUN" "lapply" "inherits" "assign_item" "flatten_list" "structure" "flatten_lints" "lint_package" "withCallingHandlers" "suppressMessages" "MYPREPS[[prep]]" "goodpractice::gp" "run_checks" "auto::check" "eval" "eval" "withVisible" "source" ".x" 
"as.list.environment" "as.list" "FUN" "lapply" "lazyeval::lazy_eval" "escape" "paste" "structure" "regex" "p" "structure" "regex" "rex_" "rex" "add_options" "re_substitutes" "FUN" "lapply" "lint_package" "withCallingHandlers" "suppressMessages" "MYPREPS[[prep]]" "goodpractice::gp" "run_checks" "auto::check" "eval" "eval" "withVisible" "source" ".x" 
"apply" "setDynamicFlags" "prepare_Rd" "checkTnF" "doTryCatch" "tryCatchOne" "tryCatchList" "tryCatch" "<Anonymous>" "goodpractice::gp" "run_checks" "auto::check" "eval" "eval" "withVisible" "source" ".x" 
"options" "%in%" "getOption" "file" "parse_Rd" "eval" "eval" "prepare_Rd" "checkTnF" "doTryCatch" "tryCatchOne" "tryCatchList" "tryCatch" "<Anonymous>" "goodpractice::gp" "run_checks" "auto::check" "eval" "eval" "withVisible" "source" ".x" 
"sort.list" "structure" "Sys.getenv" "%in%" "has_color" "crayon::blue" "cat" "FUN" "lapply" "gp_positions" "gp_advice" "print.goodPractice" "print" "run_checks" "auto::check" "eval" "eval" "withVisible" "source" ".x" 
"paste" "Sys.getenv" "%in%" "has_color" "crayon::blue" "cat" "FUN" "lapply" "gp_positions" "gp_advice" "print.goodPractice" "print" "run_checks" "auto::check" "eval" "eval" "withVisible" "source" ".x" 
"match.arg" "sort.list" "structure" "Sys.getenv" "%in%" "has_color" "crayon::blue" "cat" "FUN" "lapply" "gp_positions" "gp_advice" "print.goodPractice" "print" "run_checks" "auto::check" "eval" "eval" "withVisible" "source" ".x" 
"cmpSym" "cmp" "h" "tryInline" "cmpCall" "cmp" "h" "tryInline" "cmpCall" "cmp" "genCode" "cmpfun" "doTryCatch" "tryCatchOne" "tryCatchList" "tryCatch" "compiler:::tryCmpfun" "header_line" "gp_footer" "print.goodPractice" "print" "run_checks" "auto::check" "eval" "eval" "withVisible" "source" ".x" 
"mayCallBrowser" "mayCallBrowserList" "mayCallBrowser" "mayCallBrowserList" "mayCallBrowser" "mayCallBrowserList" "mayCallBrowser" "mayCallBrowserList" "mayCallBrowser" "cmpfun" "doTryCatch" "tryCatchOne" "tryCatchList" "tryCatch" "compiler:::tryCmpfun" "get_source" "auto::check" 
"make.callContext" "cmpCall" "cmp" "h" "tryInline" "cmpCall" "cmp" "genCode" "cmpfun" "doTryCatch" "tryCatchOne" "tryCatchList" "tryCatch" "compiler:::tryCmpfun" "get_source" "auto::check" 
"getInlineInfo" "isBaseVar" "FUN" "lapply" "unlist" "Filter" "findLocalsList" "funEnv" "make.functionContext" "h" "tryInline" "cmpCall" "cmp" "genCode" "cb$putconst" "cmpCallArgs" "cmpCallSymFun" "cmpCall" "cmp" "cmpSymbolAssign" "h" "tryInline" "cmpCall" "cmp" "h" "tryInline" "cmpCall" "cmp" "genCode" "cmpfun" "doTryCatch" "tryCatchOne" "tryCatchList" "tryCatch" "compiler:::tryCmpfun" "parse_github_repo_spec" "parse_git_repo" "remotes:::github_remote" "get_source" "auto::check" 
"cb$putcode" "h" "tryInline" "cmpCall" "cmp" "h" "tryInline" "cmpCall" "cmp" "genCode" "cmpfun" "doTryCatch" "tryCatchOne" "tryCatchList" "tryCatch" "compiler:::tryCmpfun" "github_has_submodules" "remote_download.github_remote" "remotes:::remote_download" "get_source" "auto::check" 
"utils::download.file" "withCallingHandlers" "suppressWarnings" "base_download" "download" "doTryCatch" "tryCatchOne" "tryCatchList" "tryCatch" "github_has_submodules" "remote_download.github_remote" "remotes:::remote_download" "get_source" "auto::check" 
"utils::download.file" "withCallingHandlers" "suppressWarnings" "base_download" "download" "remote_download.github_remote" "remotes:::remote_download" "get_source" "auto::check" 
"utils::download.file" "withCallingHandlers" "suppressWarnings" "base_download" "download" "doTryCatch" "tryCatchOne" "tryCatchList" "tryCatch" "github_has_submodules" "remote_download.github_remote" "remotes:::remote_download" "get_source" "auto::check" 
"utils::download.file" "withCallingHandlers" "suppressWarnings" "base_download" "download" "remote_download.github_remote" "remotes:::remote_download" "get_source" "auto::check" 
"utils::download.file" "withCallingHandlers" "suppressWarnings" "base_download" "download" "remote_download.github_remote" "remotes:::remote_download" "get_source" "auto::check" 
"put" "writeCode" "writeCodeBlock" "writeSection" "tools::Rd2txt" "print.help_files_with_topic" "<Anonymous>" 
"make.functionContext" "cmpfun" "doTryCatch" "tryCatchOne" "tryCatchList" "tryCatch" "compiler:::tryCmpfun" "find_topic" "?" 
"%in%" "getFoldFun" "constantFoldCall" "constantFold" "cmp" "cmpCallExprFun" "cmpCall" "cmp" "h" "tryInline" "cmpCall" "cmp" "h" "tryInline" "cmpCall" "cmp" "h" "tryInline" "cmpCall" "cmp" "cmpForBody" "h" "tryInline" "cmpCall" "cmp" "h" "tryInline" "cmpCall" "cmp" "genCode" "cmpfun" "doTryCatch" "tryCatchOne" "tryCatchList" "tryCatch" "compiler:::tryCmpfun" "find_topic" "?" 
"file.show" "print.help_files_with_topic" "<Anonymous>" 
"ls" "apropos" "normalCompletions" ".completeToken" 
"options" "%in%" "getOption" "file" "readLines" "parse_Rd" "loadRdMacros" "initialRdMacros" "tools::parse_Rd" "FUN" "lapply" "invert" "build_topic_index" "topic_index" "find_pkg_topic" "find_topic" "?" 
"grepl" "loadRdMacros" "initialRdMacros" "tools::parse_Rd" "FUN" "lapply" "invert" "build_topic_index" "topic_index" "find_pkg_topic" "find_topic" "?" 
"strsplit" "put" "putw" "writeBlock" "writeContent" "writeContent" "writeSection" "tools::Rd2txt" "print.help_files_with_topic" "<Anonymous>" 
"h" "tryInline" "cmpCall" "cmp" "h" "tryInline" "cmpCall" "cmp" "genCode" "cmpfun" "doTryCatch" "tryCatchOne" "tryCatchList" "tryCatch" "compiler:::tryCmpfun" "devtools::spell_check" 
"length" "cb$putconst" "cmpSymbolAssign" "h" "tryInline" "cmpCall" "cmp" "h" "tryInline" "cmpCall" "cmp" "genCode" "cmpfun" "doTryCatch" "tryCatchOne" "tryCatchList" "tryCatch" "compiler:::tryCmpfun" "devtools::spell_check" 
"sapply" "RdTags" "show" "show" "tools::RdTextFilter" "FUN" "lapply" "devtools::spell_check" 
"tryCatch" "try" "as.character.srcref" "as.character" "as.character" "show" "show" "tools::RdTextFilter" "FUN" "lapply" "devtools::spell_check" 
"file" "open.srcfile" "open" "getSrcLines" "doTryCatch" "tryCatchOne" "tryCatchList" "tryCatch" "try" "as.character.srcref" "as.character" "as.character" "show" "show" "show" "tools::RdTextFilter" "FUN" "lapply" "devtools::spell_check" 
"%in%" "getOption" "file" "open.srcfile" "open" "getSrcLines" "doTryCatch" "tryCatchOne" "tryCatchList" "tryCatch" "try" "as.character.srcref" "as.character" "as.character" "show" "show" "show" "tools::RdTextFilter" "FUN" "lapply" "devtools::spell_check" 
"match.fun" "vapply" "rm" "close.srcfile" "close" "getSrcLines" "doTryCatch" "tryCatchOne" "tryCatchList" "tryCatch" "try" "as.character.srcref" "as.character" "as.character" "show" "show" "tools::RdTextFilter" "FUN" "lapply" "devtools::spell_check" 
".Call" "R_hunspell_find" "hunspell::hunspell" "spell_check_text" "FUN" "lapply" "devtools::spell_check" 
".Call" "R_hunspell_find" "hunspell::hunspell" "spell_check_text" "FUN" "lapply" "devtools::spell_check" 
".Call" "R_hunspell_find" "hunspell::hunspell" "spell_check_text" "FUN" "lapply" "devtools::spell_check" 
".External2" "parse_Rd" "tools::RdTextFilter" "FUN" "lapply" "devtools::spell_check" 
"sapply" "unique" "check_tzones" "Ops.POSIXt" "open.srcfile" "open" "getSrcLines" "doTryCatch" "tryCatchOne" "tryCatchList" "tryCatch" "try" "as.character.srcref" "as.character" "as.character" "show" "show" "show" "show" "show" "tools::RdTextFilter" "FUN" "lapply" "devtools::spell_check" 
"readLines" "open.srcfile" "open" "getSrcLines" "doTryCatch" "tryCatchOne" "tryCatchList" "tryCatch" "try" "as.character.srcref" "as.character" "as.character" "show" "show" "show" "tools::RdTextFilter" "FUN" "lapply" "devtools::spell_check" 
"lapply" "sapply" "RdTags" "show" "tools::RdTextFilter" "FUN" "lapply" "devtools::spell_check" 
"%in%" "structure" ".POSIXct" "file.info" "file.mtime" "open.srcfile" "open" "getSrcLines" "doTryCatch" "tryCatchOne" "tryCatchList" "tryCatch" "try" "as.character.srcref" "as.character" "as.character" "show" "show" "show" "show" "show" "tools::RdTextFilter" "FUN" "lapply" "devtools::spell_check" 
"%in%" "structure" ".POSIXct" "file.info" "file.mtime" "open.srcfile" "open" "getSrcLines" "doTryCatch" "tryCatchOne" "tryCatchList" "tryCatch" "try" "as.character.srcref" "as.character" "as.character" "show" "show" "show" "show" "show" "tools::RdTextFilter" "FUN" "lapply" "devtools::spell_check" 
"%in%" "structure" ".POSIXct" "file.info" "file.mtime" "open.srcfile" "open" "getSrcLines" "doTryCatch" "tryCatchOne" "tryCatchList" "tryCatch" "try" "as.character.srcref" "as.character" "as.character" "show" "show" "show" "show" "show" "tools::RdTextFilter" "FUN" "lapply" "devtools::spell_check" 
"getSrcLines" "doTryCatch" "tryCatchOne" "tryCatchList" "tryCatch" "try" "as.character.srcref" "as.character" "as.character" "show" "show" "show" "show" "show" "tools::RdTextFilter" "FUN" "lapply" "devtools::spell_check" 
"doTryCatch" "tryCatchOne" "tryCatchList" "tryCatch" "try" "as.character.srcref" "as.character" "as.character" "show" "show" "show" "tools::RdTextFilter" "FUN" "lapply" "devtools::spell_check" 
".Call" "R_hunspell_find" "hunspell::hunspell" "spell_check_text" "FUN" "lapply" "devtools::spell_check" 
"open.srcfile" "open" "getSrcLines" "doTryCatch" "tryCatchOne" "tryCatchList" "tryCatch" "try" "as.character.srcref" "as.character" "as.character" "show" "show" "show" "tools::RdTextFilter" "FUN" "lapply" "devtools::spell_check" 
".Call" "R_hunspell_find" "hunspell::hunspell" "spell_check_text" "spell_check_file" "FUN" "lapply" "devtools::spell_check" 
"%in%" "findCenvVar" "findFunDef" "cmpCall" "cmp" "h" "tryInline" "cmpCall" "cmp" "h" "tryInline" "cmpCall" "cmp" "h" "tryInline" "cmpCall" "cmp" "genCode" "cmpfun" "doTryCatch" "tryCatchOne" "tryCatchList" "tryCatch" "compiler:::tryCmpfun" "devtools::document" 
"sum" ".deparseOpts" "deparse" "as.data.frame.character" "as.data.frame" "data.frame" "parse_deps" "suggests_dep" "check_suggested" "devtools::document" 
"cb$restorecurloc" "cmpCall" "cmp" "h" "tryInline" "cmpCall" "cmp" "genCode" "cmpfun" "doTryCatch" "tryCatchOne" "tryCatchList" "tryCatch" "compiler:::tryCmpfun" "load_all" "devtools::document" 
"tryCatch" "checkCall" "cmpCall" "cmp" "cmpSymbolAssign" "h" "tryInline" "cmpCall" "cmp" "h" "tryInline" "cmpCall" "cmp" "genCode" "cmpfun" "doTryCatch" "tryCatchOne" "tryCatchList" "tryCatch" "compiler:::tryCmpfun" "generate_collate" "roxygen2::update_collate" "load_all" "devtools::document" 
"gc" "unload_dll" "load_all" "devtools::document" 
"gc" "unload_dll" "load_all" "devtools::document" 
"gc" "unload_dll" "load_all" "devtools::document" 
"gc" "unload_dll" "unload" "load_all" "devtools::document" 
"gc" "unload_dll" "unload" "load_all" "devtools::document" 
"gc" "unload_dll" "unload" "load_all" "devtools::document" 
"lapply" "unlist" "unique" "findLocalsList1" "FUN" "lapply" "unlist" "unique" "findLocalsList1" "FUN" "lapply" "unlist" "unique" "findLocalsList1" "FUN" "lapply" "unlist" "unique" "findLocalsList1" "unique" "FUN" "lapply" "unlist" "unique" "findLocalsList1" "FUN" "lapply" "unlist" "unique" "findLocalsList1" "findLocalsList" "funEnv" "make.functionContext" "cmpfun" "doTryCatch" "tryCatchOne" "tryCatchList" "tryCatch" "compiler:::tryCmpfun" "process_imports" "load_imports" "load_all" "devtools::document" 
"as.name" "h" "tryInline" "cmpCall" "cmp" "h" "tryInline" "cmpCall" "cmp" "genCode" "cmpfun" "doTryCatch" "tryCatchOne" "tryCatchList" "tryCatch" "compiler:::tryCmpfun" "load_data" "load_all" "devtools::document" 
"h" "tryInline" "cmpCall" "cmp" "genCode" "cb$putconst" "cmpCallArgs" "cmpCallSymFun" "cmpCall" "cmp" "h" "tryInline" "cmpCall" "cmp" "genCode" "cmpfun" "doTryCatch" "tryCatchOne" "tryCatchList" "tryCatch" "compiler:::tryCmpfun" "source_many" "force" "withr_with_dir" "load_code" "load_all" "devtools::document" 
"mayCallBrowserList" "mayCallBrowser" "cmpfun" "doTryCatch" "tryCatchOne" "tryCatchList" "tryCatch" "compiler:::tryCmpfun" "run_ns_load_actions" "load_all" "devtools::document" 
"cmpCall" "cmp" "cmpSymbolAssign" "h" "tryInline" "cmpCall" "cmp" "h" "tryInline" "cmpCall" "cmp" "genCode" "cmpfun" "doTryCatch" "tryCatchOne" "tryCatchList" "tryCatch" "compiler:::tryCmpfun" "roxygen2::roxygenise" "force" "withr::with_envvar" "devtools::document" 
"any.dots" "checkCall" "cmpCall" "cmp" "h" "tryInline" "cmpCall" "cmp" "genCode" "cmpfun" "doTryCatch" "tryCatchOne" "tryCatchList" "tryCatch" "compiler:::tryCmpfun" "FUN" "lapply" "parse_package" "roxygen2::roxygenise" "force" "withr::with_envvar" "devtools::document" 
"findCenvVar" "getInlineInfo" "tryInline" "cmpCall" "cmp" "h" "tryInline" "cmpCall" "cmp" "genCode" "cmpfun" "doTryCatch" "tryCatchOne" "tryCatchList" "tryCatch" "compiler:::tryCmpfun" "roc_process.rd_roclet" "roc_process" "FUN" "lapply" "unlist" "roxygen2::roxygenise" "force" "withr::with_envvar" "devtools::document" 
"cmpCallSymFun" "cmpCall" "cmp" "cmpSymbolAssign" "h" "tryInline" "cmpCall" "cmp" "h" "tryInline" "cmpCall" "cmp" "cmpForBody" "h" "tryInline" "cmpCall" "cmp" "h" "tryInline" "cmpCall" "cmp" "genCode" "cmpfun" "doTryCatch" "tryCatchOne" "tryCatchList" "tryCatch" "compiler:::tryCmpfun" "process_inherit_params" "roc_process.rd_roclet" "roc_process" "FUN" "lapply" "unlist" "roxygen2::roxygenise" "force" "withr::with_envvar" "devtools::document" 
"findVar" "cmpSym" "cmp" "genCode" "cb$putconst" "cmpCallArgs" "cmpCallSymFun" "cmpCall" "cmp" "h" "tryInline" "cmpCall" "cmp" "genCode" "cmpfun" "doTryCatch" "tryCatchOne" "tryCatchList" "tryCatch" "compiler:::tryCmpfun" "roc_output.rd_roclet" "roc_output" "FUN" "lapply" "unlist" "roxygen2::roxygenise" "force" "withr::with_envvar" "devtools::document" 
"paste0" "strlpad" "paste" "FUN" "vapply" ".encode_numeric_version" "split" "Ops.numeric_version" ">=" "is_installed" "check_suggested" "devtools::spell_check" 
"file.info" "file.mtime" "open.srcfile" "open" "getSrcLines" "doTryCatch" "tryCatchOne" "tryCatchList" "tryCatch" "try" "as.character.srcref" "as.character" "as.character" "show" "show" "show" "show" "show" "tools::RdTextFilter" "FUN" "lapply" "devtools::spell_check" 
"getSrcLines" "doTryCatch" "tryCatchOne" "tryCatchList" "tryCatch" "try" "as.character.srcref" "as.character" "as.character" "show" "show" "show" "tools::RdTextFilter" "FUN" "lapply" "devtools::spell_check" 
".Call" "R_hunspell_find" "hunspell::hunspell" "spell_check_text" "FUN" "lapply" "devtools::spell_check" 
"read.dcf" "as.list" "read_dcf" "suggests_dep" "check_suggested" "load_all" "devtools::document" 
"gc" "unload_dll" "load_all" "devtools::document" 
"gc" "unload_dll" "load_all" "devtools::document" 
"gc" "unload_dll" "load_all" "devtools::document" 
"tryInline" "cmpCall" "cmp" "cmpSymbolAssign" "h" "tryInline" "cmpCall" "cmp" "h" "tryInline" "cmpCall" "cmp" "genCode" "cmpfun" "doTryCatch" "tryCatchOne" "tryCatchList" "tryCatch" "compiler:::tryCmpfun" "sort_s4classes" "lapply" "remove_s4_classes" "unload" "load_all" "devtools::document" 
"gc" "unload_dll" "unload" "load_all" "devtools::document" 
"gc" "unload_dll" "unload" "load_all" "devtools::document" 
"gc" "unload_dll" "unload" "load_all" "devtools::document" 
"registerS3methods" "register_s3" "load_all" "devtools::document" 
"str_trim" "<Anonymous>" "FUN" "lapply" "vapply" "compact" "parse_preref" "<Anonymous>" "mapply" "Map" "FUN" "lapply" "parse_package" "roxygen2::roxygenise" "force" "withr::with_envvar" "devtools::document" 
".Call" "stri_trim_both" "str_trim" "parse_description" "parse_preref" "<Anonymous>" "mapply" "Map" "FUN" "lapply" "parse_package" "roxygen2::roxygenise" "force" "withr::with_envvar" "devtools::document" 
"paste0" "paste0" "rd_tag" "format.param_tag" "FUN" "lapply" "format.rd_file" "FUN" "vapply" "roc_output.rd_roclet" "roc_output" "FUN" "lapply" "unlist" "roxygen2::roxygenise" "force" "withr::with_envvar" "devtools::document" 
"file.info" "file.mtime" "srcfile" "parse_Rd" "tools::RdTextFilter" "FUN" "lapply" "devtools::spell_check" 
"setwd" "open.srcfile" "open" "getSrcLines" "doTryCatch" "tryCatchOne" "tryCatchList" "tryCatch" "try" "as.character.srcref" "as.character" "as.character" "show" "show" "show" "tools::RdTextFilter" "FUN" "lapply" "devtools::spell_check" 
"file" "open.srcfile" "open" "getSrcLines" "doTryCatch" "tryCatchOne" "tryCatchList" "tryCatch" "try" "as.character.srcref" "as.character" "as.character" "show" "show" "show" "tools::RdTextFilter" "FUN" "lapply" "devtools::spell_check" 
"readLines" "getSrcLines" "doTryCatch" "tryCatchOne" "tryCatchList" "tryCatch" "try" "as.character.srcref" "as.character" "as.character" "show" "show" "show" "show" "show" "tools::RdTextFilter" "FUN" "lapply" "devtools::spell_check" 
".External2" "parse_Rd" "loadRdMacros" "initialRdMacros" "parse_Rd" "tools::RdTextFilter" "FUN" "lapply" "devtools::spell_check" 
"options" "%in%" "getOption" "file" "open.srcfile" "open" "getSrcLines" "doTryCatch" "tryCatchOne" "tryCatchList" "tryCatch" "try" "as.character.srcref" "as.character" "as.character" "show" "show" "tools::RdTextFilter" "FUN" "lapply" "devtools::spell_check" 
"tryCatch" "try" "as.character.srcref" "as.character" "as.character" "show" "show" "show" "tools::RdTextFilter" "FUN" "lapply" "devtools::spell_check" 
"$" "file.mtime" "open.srcfile" "open" "getSrcLines" "doTryCatch" "tryCatchOne" "tryCatchList" "tryCatch" "try" "as.character.srcref" "as.character" "as.character" "show" "show" "show" "show" "show" "tools::RdTextFilter" "FUN" "lapply" "devtools::spell_check" 
"gsub" "parse_deps" "suggests_dep" "chec