% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/aprof.R
\name{aprof}
\alias{aprof}
\title{Create an 'aprof' object for usage in the package 'aprof'}
\usage{
aprof(src = NULL, output = NULL)
}
\arguments{
\item{src}{The name of the source code file (and path if not in the working
directory). The source code file is expected to be a 
a plain text file (e.g. txt, .R), containing the code of the
previously profiled program. If left empty, some "aprof" functions
(e.g. \code{readLineDensity}) will attempt to extract this information from
the call stack but this is not recommended (as the success of
file name detection operations vary). Note that
functions that require a defined source file will fail if
the source file is not defined or detected in the call stack.}

\item{output}{The file name (and path if not in the working
directory) of a previously created profiling exercise.}
}
\value{
An aprof object
}
\description{
Create 'aprof' objects for usage with 'aprof' functions
}
\details{
Creates an "aprof" object from the R-profiler's output and a source file.
The objects created through "aprof" can be used by the standard functions
plot, summary and print (more specifically:
\code{plot.aprof}, \code{summary.aprof} and \code{print.aprof}).
See the exampe below for more details.

Using aprof with knitr and within .Rmd or .Rnw documents
is not yet supported by the R profiler. Note that setting the
chuck option: engine="Rscript", disables line-profiling.
Line profiling only works in a interactive session (Oct 2015). 
In these cases users are advised to use the standard
Rprof functions or "profr" (while setting engine="Rscript") and
not to rely on line-profiling based packages (for the time
being).
}
\examples{
\dontrun{
   ## create function to profile
     foo <- function(N){
             preallocate<-numeric(N)
             grow<-NULL
              for(i in 1:N){
                  preallocate[i]<-N/(i+1)
                  grow<-c(grow,N/(i+1))
                 }
     }

     ## save function to a source file and reload
     dump("foo",file="foo.R")
     source("foo.R")

     ## create file to save profiler output
     tmp<-tempfile()

     ## Profile the function
     Rprof(tmp,line.profiling=TRUE)
     foo(1e4)
     Rprof(append=FALSE)

     ## Create a aprof object
     fooaprof<-aprof("foo.R",tmp)
     ## display basic information, summarize and plot the object
     fooaprof
     summary(fooaprof)
     plot(fooaprof)
     profileplot(fooaprof)

     ## To continue with memory profiling:
     ## enable memory.profiling=TRUE
     Rprof(tmp,line.profiling=TRUE,memory.profiling=TRUE)
     foo(1e4)
     Rprof(append=FALSE)
     ## Create a aprof object
     fooaprof<-aprof("foo.R",tmp)
     ## display basic information, and plot memory usage
     fooaprof
     
     plot(fooaprof)
   
}
}
\author{
Marco D. Visser
}
\seealso{
\code{\link{plot.aprof}}, \code{\link{summary.aprof}},
\code{\link{print.aprof}}, \code{\link{Rprof}} and
\code{\link{summaryRprof}}.
}
\concept{
Line profiling
}

